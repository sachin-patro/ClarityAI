// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for direct connection, needed for migrations
}

model User {
  id            String         @id // This will match Supabase Auth user id
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  certificates  Certificate[]
  analyses      Analysis[]
  chatSessions  ChatSession[]
}

model Certificate {
  id              String    @id @default(cuid())
  certificateNumber String  @unique
  laboratory      String    // GIA or IGI
  pdfUrl         String?   // URL to stored PDF
  rawData        Json      // Extracted PDF data
  carat          Float
  color          String
  clarity        String
  cut            String?
  polish         String?
  symmetry       String?
  fluorescence   String?
  measurements   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  analyses       Analysis[]
  chatSessions   ChatSession[]

  @@index([certificateNumber])
}

model Analysis {
  id            String      @id @default(cuid())
  summary       String
  strengths     String[]
  concerns      String[]
  valueAssessment String
  questions     String[]
  createdAt     DateTime    @default(now())
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
}

model ChatSession {
  id            String       @id @default(cuid())
  messages      Message[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  certificateId String
  certificate   Certificate  @relation(fields: [certificateId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
}

model Message {
  id            String      @id @default(cuid())
  content       String
  role          String      // 'user' or 'assistant'
  createdAt     DateTime    @default(now())
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])

  @@index([chatSessionId])
}
